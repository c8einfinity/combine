{% set user = request.session.get("user") %}
{% set user_permissions = request.session.get("user_permissions") %}
<div class="px-3 py-4">
    <div class="content container-fluid">
        <div class="row">
            <div class="col-10">
                <h3 class="text-anton text-maastricht-blue pb-2">USER GROUPS</h3>
            </div>
            {% if (user_permissions.permissions.User_Groups.visible == "1"
                and user_permissions.permissions.User_Groups.create == "1") or user.user_group_id == "1" %}
                <div class="col-2">
                    <button type="submit" class="btn btn-soft-green rounded-0 mt-2 w-100" onclick="getUserGroupFormModal()">
                        + Add User Group
                    </button>
                </div>
            {% endif %}
        </div>
        {% if user_permissions.permissions.User_Groups.visible == "1" or user.user_group_id == "1" %}
            <div class="content col-12 mt-5 pt-4 pb-5 px-4" style="height: fit-content">
                <table id="user-groups-grid" class="table text-maastricht-blue m-0" style="width: 100%">
                    <thead>
                    <!-- table details filled in completely by data tables -->
                    </thead>
                </table>
            </div>
            <div id="message"></div>
            <div id="form"></div>
        {% endif %}
    </div>
</div>
<script>
    if (typeof userGroupsGrid === 'undefined') {
        let userGroupsGrid;
    }

    userGroupsGrid = null;

    $(document).ready(function () {
        userGroupsGrid = $("#user-groups-grid").DataTable({
            dom: "",
            ajax: "/api/user_groups",
            columns: [
                {
                    "title": "ID",
                    "data": "id",
                    "visible": false
                },
                {
                    "title": "Name",
                    "data": "name"
                },
                {
                    "title": "Date Created",
                    "data": "date_created"
                },
                {
                    "title": "Permissions",
                    "data": "permissions",
                    "width": "40%"
                },
                {
                    "title": "Status",
                    "data": "is_active"
                },
                {
                    "orderable": false,
                    "render": function (data, type, row) {
                        let actions = "";

                        {% if user_permissions.permissions.Users.edit == "1" or user.user_group_id == "1" %}
                            actions += ` <a class="fas fa-pen-to-square mr-2" href="#" onclick="getUserGroupFormModal('${row.id}')"></a>`;
                        {% endif %}

                        {% if user_permissions.permissions.Users.delete == "1" or user.user_group_id == "1" %}
                            if (row.id !== 0) {
                                actions += ` <a class="fas fa-trash float-right" href="#" onclick="deleteUserGroup(${row.id})"></a>`;
                            }
                        {% endif %}

                        return actions;
                    }
                }
            ],
            language: {
                emptyTable: `{% include ("snippets/datatable_empty.twig") %}`
            },
            processing: true,
            serverSide: true
        });
    });

    /**
     * Function to select all checkboxes.
     */
    function selectAll() {
        let ele = document.getElementsByTagName('input');

        for (let i = 0; i < ele.length; i++) {
            if (ele[i].type === 'checkbox') {
                ele[i].checked = true;
            }
        }
    }

    /**
     * Function to deselect all checkboxes.
     */
    function selectNone() {
        let ele = document.getElementsByTagName('input');

        for (let i = 0; i < ele.length; i++) {
            if (ele[i].type === 'checkbox') {
                ele[i].checked = false;
            }
        }
    }

    /**
     * Function to prepare the user group permissions data for submission.
     * @returns {*[]}
     */
    function prepareUserGroupPermissionsSubmission() {
        const userGroupPermissions = [];
        const userGroupPermissionsRows = $(".user-group-permissions-record");

        userGroupPermissionsRows.each(function () {
            const permissions = {};
            const permissionsList = $(`input[name^="${this.children[0].innerHTML}"]`);

            permissionsList.each(function () {
                if (this.checked) {
                    this.value = 1;
                } else if (this.value !== "-") {
                    this.value = 0;
                }

                permissions[this.name.split("_").pop()] = this.value;
            });

            userGroupPermissions.push({
                "access_point": this.children[0].innerHTML,
                "permissions": permissions
            });
        });

        return userGroupPermissions;
    }

    if (typeof message === 'undefined') {
        let message;
    }

    message = $("#message");

    /**
     * Function to reset the form, reload the table, and reset the message.
     */
    function clearUserGroupForm() {
        document.forms[0].name.value = "";

        selectNone();
        userGroupsGrid.ajax.reload();
        message.html(``);
    }

    /**
     * Function to add a user group.
     */
    function addUserGroup(id) {
        if (document.forms[0].name.value === "") {
            message.html(`<div class="alert alert-danger">Name is required</div>`);
            document.forms[0].name.focus();

            return;
        }

        message.html(`<div class="text-center" style="position: absolute; width: 100vw; height: 100vh; z-index: 200;"><h5 class="text-anton text-maastricht-blue pb-2">Adding ...</h5><div style="width: 5rem; height: 5rem;" class="spinner-border" role="status">
                <span class="sr-only text-maastricht-blue">Adding ...</span>
            </div></div>`);

        const formData = new FormData();

        if (id) {
            formData.append("id", id);
        }

        formData.append("name", $("#name").val());
        formData.append("permissions", JSON.stringify(prepareUserGroupPermissionsSubmission()));

        const errorMessage = `Something went wrong adding the user group.`;

        fetch("/api/user_groups?formToken={{ formToken() }}", {
            method: "POST",
            body: formData
        }).then(response => {
            clearUserGroupForm();

            if (response.status === 200) {
                return response.json();
            } else {
                showMessage(errorMessage, "danger");
            }
        }).then(data => {
            const messageType = (data.success) ? "info" : "danger";

            showMessage(data.message, messageType);
        }).catch(error => {
            clearUserGroupForm();

            console.error(error);
            showMessage(errorMessage, "danger");
        });
    }

    /**
     * Function to get the user group form modal to add or edit records.
     * @param id
     */
    function getUserGroupFormModal(id) {
        const idParam = (id) ? `id=${id}&` : "";

        showForm("edit", `/api/user_groups/form?${idParam}formToken={{ formToken() }}`);
    }

    /**
     * Function to delete a user group.
     * @param id
     */
    function deleteUserGroup(id) {
        const deleteConfirmationMessage = "Delete User Group? All users' permissions in this user group will be " +
            "reset to the default user group."

        if (confirm(deleteConfirmationMessage)) {
            deleteUrl(`/api/user_groups/${id}`, null, "message", function () {
                userGroupsGrid.ajax.reload();
            });
        }
    }
</script>