<div class="px-3 py-4">
    <div class="content container-fluid">
        <h3 class="text-anton text-maastricht-blue pb-2">USER GROUPS</h3>
        <form id="user_group" class="card" method="post" onsubmit="return false;">
            <div class="card-body">
                <div class="row">
                    <div class="col-12 form-group">
                        <label for="name">Name</label>
                        <input type="text" class="form-control" name="name" id="name" placeholder="Name">
                    </div>
                    <div class="col-12">
                        {% with roles = roles %}
                            {% include "snippets/roles.twig" %}
                        {% endwith %}
                    </div>
                    <input id="roles" type="hidden" name="role_test[test][testy]" value="0"/>
                    <div class="col-12 col-md-2 pt-4">
                        <button type="submit" class="btn btn-soft-green rounded-0 mt-2 w-100" onclick="addUserGroup()">
                            Add
                        </button>
                    </div>
                </div>
            </div>
        </form>
        <div class="content col-12 mt-5 pt-4 pb-5 px-4" style="height: fit-content">
            <table id="user-groups-grid" class="table text-maastricht-blue m-0" style="width: 100%">
                <thead>
                <!-- table details filled in completely by data tables -->
                </thead>
            </table>
        </div>
        <div id="message"></div>
    </div>
</div>
<script>
    if (typeof userGroupsGrid === 'undefined') {
        let userGroupsGrid;
    }

    userGroupsGrid = null;

    $(document).ready(function () {
        userGroupsGrid = $("#user-groups-grid").DataTable({
            dom: "",
            ajax: "/api/user_groups",
            columns: [
                {
                    "title": "ID",
                    "data": "id",
                    "visible": false
                },
                {
                    "title": "Name",
                    "data": "name"
                },
                {
                    "title": "Date Created",
                    "data": "date_created"
                },
                {
                    "title": "Permissions",
                    "data": "permissions",
                    "width": "40%"
                },
                {
                    "title": "Status",
                    "data": "is_active"
                },
                {
                    "orderable": false,
                    "render": function (data, type, row) {
                        return ` <a class="fas fa-trash float-right" href="#" onclick="deleteUserGroup(${row.id})"></a>`
                    }
                }
            ],
            language: {
                emptyTable: `{% include ("snippets/datatable_empty.twig") %}`
            },
            processing: true,
            serverSide: true
        });
    });

    /**
     * Function to select all checkboxes.
     */
    function selectAll() {
        let ele = document.getElementsByTagName('input');

        for (let i = 0; i < ele.length; i++) {
            if (ele[i].type === 'checkbox') {
                ele[i].checked = true;
            }
        }
    }

    /**
     * Function to deselect all checkboxes.
     */
    function selectNone() {
        let ele = document.getElementsByTagName('input');

        for (let i = 0; i < ele.length; i++) {
            if (ele[i].type === 'checkbox') {
                ele[i].checked = false;
            }
        }
    }

    /**
     * Function to prepare the roles data for submission.
     * @returns {*[]}
     */
    function prepareRolesSubmission() {
        const roles = [];
        const roleRows = $(".roles-record");

        roleRows.each(function () {
            const permissions = {};
            const permissionsList = $(`input[name^="${this.children[0].innerHTML}"]`);

            permissionsList.each(function () {
                if (this.checked) {
                    this.value = 1;
                } else if (this.value !== "-") {
                    this.value = 0;
                }

                permissions[this.name.split("_").pop()] = this.value;
            });

            roles.push({
                "access_point": this.children[0].innerHTML,
                "permissions": permissions
            });
        });

        return roles;
    }

    /**
     * Function to reset the form, reload the table, and reset the message.
     */
    function clearUserGroupForm() {
        document.forms[0].name.value = "";

        selectNone();
        userGroupsGrid.ajax.reload();
        $("#message").html(``);
    }

    /**
     * Function to add a user group.
     */
    function addUserGroup() {
        if (document.forms[0].name.value === "") {
            $("#message").html(`<div class="alert alert-danger">Name is required</div>`);
            document.forms[0].name.focus();

            return;
        }

        $("#message").html(`<div class="text-center" style="position: absolute; width: 100vw; height: 100vh; z-index: 200;"><h5 class="text-anton text-maastricht-blue pb-2">Adding ...</h5><div style="width: 5rem; height: 5rem;" class="spinner-border" role="status">
                <span class="sr-only text-maastricht-blue">Adding ...</span>
            </div></div>`);

        const formData = new FormData();

        formData.append("name", $("#name").val());
        formData.append("permissions", JSON.stringify(prepareRolesSubmission()));

        const errorMessage = `Something went wrong adding the user group.`;

        fetch("/api/user_groups?formToken={{ formToken() }}", {
            method: "POST",
            body: formData
        }).then(response => {
            clearUserGroupForm();

            if (response.status === 200) {
                return response.json();
            } else {
                showMessage(errorMessage, "danger");
            }
        }).then(data => {
            const messageType = (data.success) ? "info" : "danger";

            showMessage(data.message, messageType);
        }).catch(error => {
            clearUserGroupForm();

            console.error(error);
            showMessage(errorMessage, "danger");
        });
    }

    /**
     * Function to delete a user group.
     * @param id
     */
    function deleteUserGroup(id) {
        if (confirm("Delete User Group?")) {
            deleteUrl(`/api/user_groups/${id}`, null, "message", function () {
                userGroupsGrid.ajax.reload();
            });
        }
    }
</script>